{
	/* ============== Utils =============== */
	// break-cmt
	"Create a break comment": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "break-cmt",
		"body": "/* ============== ${1:commnet} =============== */"
	},

	// jsdoc-cmt
	"Create a JSDoc comment": {
		"scope": "javascript,javascriptreact",
		"prefix": "jsdoc-cmt",
		"body": [
			"/**",
			" * ${1:description}.",
			" *",
			" * @param {${2:param-type}} ${3:param-name} - ${4:param-desc}.",
			" * @return {${5:return-type}} ${6:return-name} - ${7:return-desc}.",
			" */"
		],
		"description": "Create a JSDoc comment"
	},

	/* ============== ${1:console} =============== */
	"Console.log()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "clg",
		"body": "console.log($1)"
	},

	"Console.warn()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cwa",
		"body": "console.warn($1)"
	},

	"Console.info()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cin",
		"body": "console.info($1)"
	},

	"Console.error()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cer",
		"body": "console.error($1)"
	},

	"Console.table()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "clt",
		"body": "console.table($1)"
	},

	"Console.time()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cti",
		"body": "console.time($1)"
	},

	"Console.timeEnd()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cte",
		"body": "console.timeEnd($1)"
	},

	/* ============== Import, Export, Requies =============== */
	// imp
	"import package from package'": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "imp",
		"body": "import $1 from '${1:package}'"
	},

	// impd
	"import {} from package'": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "impd",
		"body": "import { $2 } from '${1:package}'"
	},

	// impas
	"import * as from package'": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "impas",
		"body": "import * as $2 from '${1:package}'"
	},

	// expd
	"export default": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "expd",
		"body": "export default ${1:variable}"
	},

	// dreq
	"destructuring require": {
		"scope": "javascript",
		"prefix": "dreq",
		"body": "const { $2 } = require('${1:package}');"
	},

	// mde
	"module export": {
		"scope": "javascript",
		"prefix": "mde",
		"body": "module.exports = { $1 }"
	},

	/* ============== Functions =============== */
	// fn
	"Create a normal function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "fn",
		"body": [
			"${1:async} function ${2:fnName} (${3:params}){",
			"   try{",
			"    $4",
			"   }catch(error){",
			"   }",
			"}"
		],
		"description": "Create a function"
	},

	// afn
	"Create an arrow function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "afn",
		"body": [
			"const ${1:fnName} = (${2:params}) => {",
			"  try {",
			"    $3",
			"  } catch (error) {",
			"  }",
			"};",
			""
		],
		"description": "Create a arrow function"
	},

	/* ============== Jquery =============== */
	// jq
	"Make a selector": {
		"scope": "javascript,typescript",
		"prefix": "jq",
		"body": ["$('$1').$2"],
		"description": "Make a selector"
	},

	// jqt
	"Make a this selector": {
		"scope": "javascript,typescript",
		"prefix": "jqt",
		"body": ["$(this).$1"],
		"description": "Make a selector"
	},

	// jquery-typing
	"Create snippet jquery": {
		"scope": "javascript,typescript",
		"prefix": "jquery-typing",
		"body": [
			"/// <reference path=\"D:\\typings\\jquery\\globals\\jquery\\index.d.ts\" />"
		],
		"description": "Create snippet jquery"
	},

	/* ============== ExpressJS =============== */
	// exfn
	"Make Express Fully Function": {
		"scope": "javascript,typescript",
		"prefix": "exfn",
		"body": [
			"const ${1:fnName} = (req, res) => {",
			"  try {",
			"    $2",
			"  } catch (${3:error}) {",
			"    ",
			"  }",
			"}"
		],
		"description": "Make Express Fully Function"
	},

	// eexfn
	"Make Express Fully Function And Export": {
		"scope": "javascript,typescript",
		"prefix": "eexfn",
		"body": [
			"exports.${1:fnName} = ${2:async} (req, res) => {",
			"  try {",
			"    $4",
			"  } catch (error) {",
			"    console.error('Function $1 Error: ', error);",
			"    return res.render('404');",
			"  }",
			"}"
		],
		"description": "Make Express Fully Function And Export"
	},

	// mmodel
	"Create model with mongoose": {
		"scope": "javascript,typescript",
		"prefix": "mmodel",
		"body": [
			"const mongoose = require('mongoose');",
			"const Schema = mongoose.Schema;",
			"",
			"const ${1:name}Schema = new Schema({",
			"  $5",
			"});",
			"",
			"const $2${1:Name}Model = mongoose.model('$2${1:name}', ${1:name}Schema, '${1:name}s');",
			"",
			"module.exports = $2${1:Name}Model;",
			""
		],
		"description": "Create model with mongoose"
	},

	// api
	"Make Import api express": {
		"scope": "javascript,typescript",
		"prefix": "api",
		"body": [
			"const ${1:name}${2:Api} = require('express').Router();",
			"const ${1:name}Controller = require('../controllers/${1:name}.controller');",
			"$3",
			"module.exports = ${1:name}${2:Api};"
		],
		"description": "Make route/api express"
	},

	// route
	"Make Import route express": {
		"scope": "javascript,typescript",
		"prefix": "rout",
		"body": [
			"const ${1:name}${2:Route} = require('express').Router();",
			"const ${1:name}Controller = require('../controllers/${1:name}.controller');",
			"$3",
			"module.exports = ${1:name}${2:Route};"
		],
		"description": "Make route express"
	}
}
